{"value":[{"file":"util.d.ts","content":"import type { MouseEvent } from 'react';\nimport { NodeElement, Key, DataNode, DataEntity, NodeInstance, FlattenNode, BasicDataNode } from './interface';\nimport { TreeProps, AllowDrop } from './Tree';\nexport declare function arrDel(list: Key[], value: Key): Key[];\nexport declare function arrAdd(list: Key[], value: Key): Key[];\nexport declare function posToArr(pos: string): string[];\nexport declare function getPosition(level: string | number, index: number): string;\nexport declare function isTreeNode(node: NodeElement): boolean;\nexport declare function getDragChildrenKeys<TreeDataType extends BasicDataNode = DataNode>(dragNodeKey: Key, keyEntities: Record<Key, DataEntity<TreeDataType>>): Key[];\nexport declare function isLastChild<TreeDataType extends BasicDataNode = DataNode>(treeNodeEntity: DataEntity<TreeDataType>): boolean;\nexport declare function isFirstChild<TreeDataType extends BasicDataNode = DataNode>(treeNodeEntity: DataEntity<TreeDataType>): boolean;\nexport declare function calcDropPosition<TreeDataType extends BasicDataNode = DataNode>(event: MouseEvent, dragNode: NodeInstance<TreeDataType>, targetNode: NodeInstance<TreeDataType>, indent: number, startMousePosition: {\n    x: number;\n    y: number;\n}, allowDrop: AllowDrop<TreeDataType>, flattenedNodes: FlattenNode<TreeDataType>[], keyEntities: Record<Key, DataEntity<TreeDataType>>, expandKeys: Key[]): {\n    dropPosition: -1 | 0 | 1;\n    dropLevelOffset: number;\n    dropTargetKey: Key;\n    dropTargetPos: string;\n    dropContainerKey: Key;\n    dragOverNodeKey: Key;\n    dropAllowed: boolean;\n};\n/**\n* Return selectedKeys according with multiple prop\n* @param selectedKeys\n* @param props\n* @returns [string]\n*/\nexport declare function calcSelectedKeys(selectedKeys: Key[], props: TreeProps): Key[];\nexport declare function convertDataToTree(treeData: DataNode[], processor?: {\n    processProps: (prop: DataNode) => any;\n}): NodeElement[];\n/**\n* Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n*/\nexport declare function parseCheckedKeys(keys: Key[] | {\n    checked: Key[];\n    halfChecked: Key[];\n}): {\n    checkedKeys: Key[];\n    halfCheckedKeys: Key[];\n};\n/**\n* If user use `autoExpandParent` we should get the list of parent node\n* @param keyList\n* @param keyEntities\n*/\nexport declare function conductExpandParent(keyList: Key[], keyEntities: Record<Key, DataEntity>): Key[];\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/util.tsx"}],"type":"Array"}