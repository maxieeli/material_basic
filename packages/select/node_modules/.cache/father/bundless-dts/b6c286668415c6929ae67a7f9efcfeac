{"value":[{"file":"index.d.ts","content":"import type { Ref, ReactNode, KeyboardEventHandler, MouseEventHandler, ChangeEventHandler, CompositionEventHandler, ReactElement, ClipboardEventHandler } from 'react';\nimport type { ScrollTo } from 'rc-virtual-list/lib/List';\nimport type { CustomTagProps, DisplayValueType, Mode, RenderNode } from '../BaseSelect';\nexport interface InnerSelectorProps {\n    prefixCls: string;\n    id: string;\n    mode: Mode;\n    inputRef: Ref<HTMLInputElement | HTMLTextAreaElement>;\n    placeholder?: ReactNode;\n    disabled?: boolean;\n    autoFocus?: boolean;\n    autoComplete?: string;\n    values: DisplayValueType[];\n    showSearch?: boolean;\n    searchValue: string;\n    activeDescendantId?: string;\n    open: boolean;\n    tabIndex?: number;\n    maxLength?: number;\n    onInputKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onInputMouseDown: MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onInputChange: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onInputPaste: ClipboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onInputCompositionStart: CompositionEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onInputCompositionEnd: CompositionEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n}\nexport interface RefSelectorProps {\n    focus: () => void;\n    blur: () => void;\n    scrollTo?: ScrollTo;\n}\nexport interface SelectorProps {\n    id: string;\n    prefixCls: string;\n    showSearch?: boolean;\n    open: boolean;\n    /** Display in the Selector value, it's not same as `value` prop */\n    values: DisplayValueType[];\n    mode: Mode;\n    searchValue: string;\n    activeValue: string;\n    inputElement: JSX.Element;\n    maxLength?: number;\n    autoFocus?: boolean;\n    activeDescendantId?: string;\n    tabIndex?: number;\n    disabled?: boolean;\n    placeholder?: ReactNode;\n    removeIcon?: RenderNode;\n    maxTagCount?: number | 'responsive';\n    maxTagTextLength?: number;\n    maxTagPlaceholder?: ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode);\n    tagRender?: (props: CustomTagProps) => ReactElement;\n    /** Check if `tokenSeparators` contains `\\n` or `\\r\\n` */\n    tokenWithEnter?: boolean;\n    choiceTransitionName?: string;\n    onToggleOpen: (open?: boolean) => void;\n    /** `onSearch` returns go next step boolean to check if need do toggle open */\n    onSearch: (searchText: string, fromTyping: boolean, isCompositing: boolean) => boolean;\n    onSearchSubmit?: (searchText: string) => void;\n    onRemove: (value: DisplayValueType) => void;\n    onInputKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    /**\n    * @private get real dom for trigger align.\n    * This may be removed after React provides replacement of `findDOMNode`\n    */\n    domRef: Ref<HTMLDivElement>;\n}\ndeclare const ForwardSelector: import(\"react\").ForwardRefExoticComponent<SelectorProps & import(\"react\").RefAttributes<RefSelectorProps>>;\nexport default ForwardSelector;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/select/src/Selector/index.tsx"}],"type":"Array"}