{"value":[{"file":"TreeNode.d.ts","content":"import * as React from 'react';\nimport { TreeContextProps } from './contextType';\nimport { IconType, Key, DataNode, BasicDataNode } from './interface';\nexport interface TreeNodeProps<TreeDataType extends BasicDataNode = DataNode> {\n    eventKey?: Key;\n    prefixCls?: string;\n    className?: string;\n    style?: React.CSSProperties;\n    id?: string;\n    expanded?: boolean;\n    selected?: boolean;\n    checked?: boolean;\n    loaded?: boolean;\n    loading?: boolean;\n    halfChecked?: boolean;\n    title?: React.ReactNode | ((data: TreeDataType) => React.ReactNode);\n    dragOver?: boolean;\n    dragOverGapTop?: boolean;\n    dragOverGapBottom?: boolean;\n    pos?: string;\n    domRef?: React.Ref<HTMLDivElement>;\n    /** New added in Tree for easy data access */\n    data?: TreeDataType;\n    isStart?: boolean[];\n    isEnd?: boolean[];\n    active?: boolean;\n    onMouseMove?: React.MouseEventHandler<HTMLDivElement>;\n    isLeaf?: boolean;\n    checkable?: boolean;\n    selectable?: boolean;\n    disabled?: boolean;\n    disableCheckbox?: boolean;\n    icon?: IconType;\n    switcherIcon?: IconType;\n    children?: React.ReactNode;\n}\nexport interface InternalTreeNodeProps extends TreeNodeProps {\n    context?: TreeContextProps;\n}\nexport interface TreeNodeState {\n    dragNodeHighlight: boolean;\n}\ndeclare class InternalTreeNode extends React.Component<InternalTreeNodeProps, TreeNodeState> {\n    state: {\n        dragNodeHighlight: boolean;\n    };\n    selectHandle: HTMLSpanElement;\n    componentDidMount(): void;\n    componentDidUpdate(): void;\n    onSelectorClick: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onSelectorDoubleClick: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onSelect: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onCheck: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onMouseEnter: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onMouseLeave: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onContextMenu: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n    onDragStart: (e: React.DragEvent<HTMLDivElement>) => void;\n    onDragEnter: (e: React.DragEvent<HTMLDivElement>) => void;\n    onDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n    onDragLeave: (e: React.DragEvent<HTMLDivElement>) => void;\n    onDragEnd: (e: React.DragEvent<HTMLDivElement>) => void;\n    onDrop: (e: React.DragEvent<HTMLDivElement>) => void;\n    onExpand: React.MouseEventHandler<HTMLDivElement>;\n    setSelectHandle: (node: any) => void;\n    getNodeState: () => \"close\" | \"open\";\n    hasChildren: () => boolean;\n    isLeaf: () => boolean;\n    isDisabled: () => boolean;\n    isCheckable: () => string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment;\n    syncLoadData: (props: any) => void;\n    isSelectable(): boolean;\n    isDraggable: () => boolean;\n    renderDragHandler: () => JSX.Element;\n    renderSwitcherIconDom: (isLeaf: boolean) => React.ReactNode;\n    renderSwitcher: () => JSX.Element;\n    renderCheckbox: () => JSX.Element;\n    renderIcon: () => JSX.Element;\n    renderSelector: () => JSX.Element;\n    renderDropIndicator: () => React.ReactNode;\n    render(): JSX.Element;\n}\ndeclare const ContextTreeNode: React.FC<TreeNodeProps>;\nexport { InternalTreeNode };\nexport default ContextTreeNode;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/TreeNode.tsx"}],"type":"Array"}