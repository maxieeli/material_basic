{"value":[{"file":"conductUtil.d.ts","content":"import { Key, DataEntity, DataNode, GetCheckDisabled, BasicDataNode } from '../interface';\ninterface ConductReturnType {\n    checkedKeys: Array<Key>;\n    halfCheckedKeys: Array<Key>;\n}\nexport declare function isCheckDisabled<TreeDataType>(node: TreeDataType): boolean;\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\nexport declare function conductCheck<TreeDataType extends BasicDataNode = DataNode>(keyList: Key[], checked: true | {\n    checked: false;\n    halfCheckedKeys: Key[];\n}, keyEntities: Record<Key, DataEntity<TreeDataType>>, getCheckDisabled?: GetCheckDisabled<TreeDataType>): ConductReturnType;\nexport {};\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/utils/conductUtil.ts"}],"type":"Array"}