{"value":{"content":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useRef, useEffect, useState, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport DrawerPanel from \"./Panel\";\nimport DrawerContext from \"./context\";\nimport KeyCode from 'rc-util/lib/KeyCode';\nimport { parseWidthHeight } from \"./utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar sentinelStyle = {\n  width: 0,\n  height: 0,\n  overflow: 'hidden',\n  outline: 'none',\n  position: 'absolute'\n};\nexport default function DrawerPopup(props) {\n  var _ref, _pushConfig$distance, _pushConfig, _classNames;\n\n  var prefixCls = props.prefixCls,\n      open = props.open,\n      placement = props.placement,\n      inline = props.inline,\n      push = props.push,\n      forceRender = props.forceRender,\n      autoFocus = props.autoFocus,\n      keyboard = props.keyboard,\n      scrollLocker = props.scrollLocker,\n      rootClassName = props.rootClassName,\n      rootStyle = props.rootStyle,\n      zIndex = props.zIndex,\n      className = props.className,\n      style = props.style,\n      motion = props.motion,\n      width = props.width,\n      height = props.height,\n      _children = props.children,\n      contentWrapperStyle = props.contentWrapperStyle,\n      mask = props.mask,\n      maskClosable = props.maskClosable,\n      maskMotion = props.maskMotion,\n      maskClassName = props.maskClassName,\n      maskStyle = props.maskStyle,\n      afterOpenChange = props.afterOpenChange,\n      onClose = props.onClose; // ================================ Refs ================================\n\n  var panelRef = useRef();\n  var sentinelStartRef = useRef();\n  var sentinelEndRef = useRef();\n\n  var onPanelKeyDown = function onPanelKeyDown(event) {\n    var keyCode = event.keyCode,\n        shiftKey = event.shiftKey;\n\n    switch (keyCode) {\n      // Tab active\n      case KeyCode.TAB:\n        {\n          if (keyCode === KeyCode.TAB) {\n            if (!shiftKey && document.activeElement === sentinelEndRef.current) {\n              var _sentinelStartRef$cur;\n\n              (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 ? void 0 : _sentinelStartRef$cur.focus({\n                preventScroll: true\n              });\n            } else if (shiftKey && document.activeElement === sentinelStartRef.current) {\n              var _sentinelEndRef$curre;\n\n              (_sentinelEndRef$curre = sentinelEndRef.current) === null || _sentinelEndRef$curre === void 0 ? void 0 : _sentinelEndRef$curre.focus({\n                preventScroll: true\n              });\n            }\n          }\n\n          break;\n        }\n      // Close\n\n      case KeyCode.ESC:\n        {\n          if (onClose && keyboard) {\n            onClose(event);\n          }\n\n          break;\n        }\n    }\n  }; // ========================== Control ===========================\n  // Auto Focus\n\n\n  useEffect(function () {\n    if (open && autoFocus) {\n      var _panelRef$current;\n\n      (_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.focus({\n        preventScroll: true\n      });\n    }\n  }, [open, autoFocus]); // ============================ Push ============================\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pushed = _useState2[0],\n      setPushed = _useState2[1];\n\n  var parentContext = useContext(DrawerContext); // Merge push distance\n\n  var pushConfig;\n\n  if (push === false) {\n    pushConfig = {\n      distance: 0\n    };\n  } else if (push === true) {\n    pushConfig = {};\n  } else {\n    pushConfig = push || {};\n  }\n\n  var pushDistance = (_ref = (_pushConfig$distance = (_pushConfig = pushConfig) === null || _pushConfig === void 0 ? void 0 : _pushConfig.distance) !== null && _pushConfig$distance !== void 0 ? _pushConfig$distance : parentContext === null || parentContext === void 0 ? void 0 : parentContext.pushDistance) !== null && _ref !== void 0 ? _ref : 180;\n  var mergedContext = useMemo(function () {\n    return {\n      pushDistance: pushDistance,\n      push: function push() {\n        setPushed(true);\n      },\n      pull: function pull() {\n        setPushed(false);\n      }\n    };\n  }, [pushDistance]); // ========================= ScrollLock =========================\n  // Tell parent to push\n\n  useEffect(function () {\n    if (open) {\n      var _parentContext$push;\n\n      parentContext === null || parentContext === void 0 ? void 0 : (_parentContext$push = parentContext.push) === null || _parentContext$push === void 0 ? void 0 : _parentContext$push.call(parentContext);\n    } else {\n      var _parentContext$pull;\n\n      parentContext === null || parentContext === void 0 ? void 0 : (_parentContext$pull = parentContext.pull) === null || _parentContext$pull === void 0 ? void 0 : _parentContext$pull.call(parentContext);\n    }\n  }, [open]); // Lock window scroll\n\n  useEffect(function () {\n    if (open && mask) {\n      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();\n    }\n  }, [open, mask]); // Clean up\n\n  useEffect(function () {\n    return function () {\n      var _parentContext$pull2;\n\n      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();\n      parentContext === null || parentContext === void 0 ? void 0 : (_parentContext$pull2 = parentContext.pull) === null || _parentContext$pull2 === void 0 ? void 0 : _parentContext$pull2.call(parentContext);\n    };\n  }, []); // ============================ Mask ============================\n\n  var maskNode = mask && /*#__PURE__*/_jsx(CSSMotion, _objectSpread(_objectSpread({}, maskMotion), {}, {\n    visible: open,\n    children: function children(_ref2, maskRef) {\n      var motionMaskClassName = _ref2.className,\n          motionMaskStyle = _ref2.style;\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-mask\"), motionMaskClassName, maskClassName),\n        style: _objectSpread(_objectSpread({}, motionMaskStyle), maskStyle),\n        onClick: maskClosable ? onClose : undefined,\n        ref: maskRef\n      });\n    }\n  }), \"mask\"); // =========================== Panel ============================\n\n\n  var motionProps = typeof motion === 'function' ? motion(placement) : motion;\n  var wrapperStyle = {};\n\n  if (pushed && pushDistance) {\n    switch (placement) {\n      case 'top':\n        wrapperStyle.transform = \"translateY(\".concat(pushDistance, \"px)\");\n        break;\n\n      case 'bottom':\n        wrapperStyle.transform = \"translateY(\".concat(-pushDistance, \"px)\");\n        break;\n\n      case 'left':\n        wrapperStyle.transform = \"translateX(\".concat(pushDistance, \"px)\");\n        break;\n\n      default:\n        wrapperStyle.transform = \"translateX(\".concat(-pushDistance, \"px)\");\n        break;\n    }\n  }\n\n  if (placement === 'left' || placement === 'right') {\n    wrapperStyle.width = parseWidthHeight(width);\n  } else {\n    wrapperStyle.height = parseWidthHeight(height);\n  }\n\n  var panelNode = /*#__PURE__*/_jsx(CSSMotion, _objectSpread(_objectSpread({}, motionProps), {}, {\n    visible: open,\n    forceRender: forceRender,\n    onVisibleChanged: function onVisibleChanged(nextVisible) {\n      afterOpenChange === null || afterOpenChange === void 0 ? void 0 : afterOpenChange(nextVisible);\n\n      if (!nextVisible) {\n        scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();\n      }\n    },\n    removeOnLeave: false,\n    leavedClassName: \"\".concat(prefixCls, \"-content-wrapper-hidden\"),\n    children: function children(_ref3, motionRef) {\n      var motionClassName = _ref3.className,\n          motionStyle = _ref3.style;\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-content-wrapper\"), motionClassName),\n        style: _objectSpread(_objectSpread(_objectSpread({}, wrapperStyle), motionStyle), contentWrapperStyle),\n        children: /*#__PURE__*/_jsx(DrawerPanel, {\n          containerRef: motionRef,\n          prefixCls: prefixCls,\n          className: className,\n          style: style,\n          children: _children\n        })\n      });\n    }\n  }), \"panel\"); // =========================== Render ===========================\n\n\n  var containerStyle = _objectSpread({}, rootStyle);\n\n  if (zIndex) {\n    containerStyle.zIndex = zIndex;\n  }\n\n  return /*#__PURE__*/_jsx(DrawerContext.Provider, {\n    value: mergedContext,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(placement), rootClassName, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-open\"), open), _defineProperty(_classNames, \"\".concat(prefixCls, \"-inline\"), inline), _classNames)),\n      style: containerStyle,\n      tabIndex: -1,\n      ref: panelRef,\n      onKeyDown: onPanelKeyDown,\n      children: [maskNode, /*#__PURE__*/_jsx(\"div\", {\n        tabIndex: 0,\n        ref: sentinelStartRef,\n        style: sentinelStyle,\n        \"aria-hidden\": \"true\",\n        \"data-sentinel\": \"start\"\n      }), panelNode, /*#__PURE__*/_jsx(\"div\", {\n        tabIndex: 0,\n        ref: sentinelEndRef,\n        style: sentinelStyle,\n        \"aria-hidden\": \"true\",\n        \"data-sentinel\": \"end\"\n      })]\n    })\n  });\n}","options":{"ext":".js","declaration":true}},"type":"Object"}