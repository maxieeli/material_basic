{"value":[{"file":"contextType.d.ts","content":"import type { MouseEvent, DragEvent, Key as ReactKey, ReactNode, Context } from 'react';\nimport { IconType, Key, DataEntity, EventDataNode, NodeInstance, DataNode, BasicDataNode } from './interface';\nimport { DraggableConfig } from './Tree';\nexport declare type NodeMouseEventParams<TreeDataType extends BasicDataNode = DataNode, T = HTMLSpanElement> = {\n    event: MouseEvent<T>;\n    node: EventDataNode<TreeDataType>;\n};\nexport declare type NodeDragEventParams<TreeDataType extends BasicDataNode = DataNode, T = HTMLDivElement> = {\n    event: DragEvent<T>;\n    node: EventDataNode<TreeDataType>;\n};\nexport declare type NodeMouseEventHandler<TreeDataType extends BasicDataNode = DataNode, T = HTMLSpanElement> = (e: MouseEvent<T>, node: EventDataNode<TreeDataType>) => void;\nexport declare type NodeDragEventHandler<TreeDataType extends BasicDataNode = DataNode, T = HTMLDivElement> = (e: DragEvent<T>, node: NodeInstance<TreeDataType>, outsideTree?: boolean) => void;\nexport interface TreeContextProps<TreeDataType extends BasicDataNode = DataNode> {\n    prefixCls: string;\n    selectable: boolean;\n    showIcon: boolean;\n    icon: IconType;\n    switcherIcon: IconType;\n    draggable?: DraggableConfig;\n    draggingNodeKey?: ReactKey;\n    checkable: boolean | ReactNode;\n    checkStrictly: boolean;\n    disabled: boolean;\n    keyEntities: Record<Key, DataEntity<any>>;\n    dropLevelOffset?: number;\n    dropContainerKey: Key | null;\n    dropTargetKey: Key | null;\n    dropPosition: -1 | 0 | 1 | null;\n    indent: number | null;\n    dropIndicatorRender: (props: {\n        dropPosition: -1 | 0 | 1;\n        dropLevelOffset: number;\n        indent: any;\n        prefixCls: any;\n    }) => ReactNode;\n    dragOverNodeKey: Key | null;\n    loadData: (treeNode: EventDataNode<TreeDataType>) => Promise<void>;\n    filterTreeNode: (treeNode: EventDataNode<TreeDataType>) => boolean;\n    titleRender?: (node: any) => ReactNode;\n    onNodeClick: NodeMouseEventHandler<TreeDataType>;\n    onNodeDoubleClick: NodeMouseEventHandler<TreeDataType>;\n    onNodeExpand: NodeMouseEventHandler<TreeDataType>;\n    onNodeSelect: NodeMouseEventHandler<TreeDataType>;\n    onNodeCheck: (e: MouseEvent<HTMLSpanElement>, treeNode: EventDataNode<TreeDataType>, checked: boolean) => void;\n    onNodeLoad: (treeNode: EventDataNode<TreeDataType>) => void;\n    onNodeMouseEnter: NodeMouseEventHandler<TreeDataType>;\n    onNodeMouseLeave: NodeMouseEventHandler<TreeDataType>;\n    onNodeContextMenu: NodeMouseEventHandler<TreeDataType>;\n    onNodeDragStart: NodeDragEventHandler<any, any>;\n    onNodeDragEnter: NodeDragEventHandler<any, any>;\n    onNodeDragOver: NodeDragEventHandler<any, any>;\n    onNodeDragLeave: NodeDragEventHandler<any, any>;\n    onNodeDragEnd: NodeDragEventHandler<any, any>;\n    onNodeDrop: NodeDragEventHandler<any, any>;\n}\nexport declare const TreeContext: Context<TreeContextProps<any> | null>;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/contextType.ts"}],"type":"Array"}