{"value":[{"file":"valueUtil.d.ts","content":"import type { BaseOptionType, DefaultOptionType } from '../Select';\nimport type { FieldNames } from '../Select';\nimport type { FlattenOptionData } from '../interface';\nexport declare function fillFieldNames(fieldNames: FieldNames | undefined, childrenAsData: boolean): {\n    label: string;\n    value: string;\n    options: string;\n};\n/**\n * Flat options into flatten list.\n * We use `optionOnly` here is aim to avoid user use nested option group.\n * Here is simply set `key` to the index if not provided.\n */\nexport declare function flattenOptions<OptionType extends BaseOptionType = DefaultOptionType>(options: OptionType[], { fieldNames, childrenAsData }?: {\n    fieldNames?: FieldNames;\n    childrenAsData?: boolean;\n}): FlattenOptionData<OptionType>[];\n/**\n * Inject `props` into `option` for legacy usage\n */\nexport declare function injectPropsWithOption<T>(option: T): T;\nexport declare function getSeparatedContent(text: string, tokens: string[]): string[];\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/select/src/utils/valueUtil.ts"}],"type":"Array"}