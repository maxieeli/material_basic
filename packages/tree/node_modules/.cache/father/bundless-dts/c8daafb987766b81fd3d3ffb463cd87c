{"value":[{"file":"interface.d.ts","content":"import type { CSSProperties, ReactNode, Key as ReactKey, ReactElement, Component } from 'react';\nimport { TreeNodeProps } from './TreeNode';\nexport { ScrollTo } from 'rc-virtual-list/lib/List';\n/** For fieldNames, we provides a abstract interface */\nexport interface BasicDataNode {\n    checkable?: boolean;\n    disabled?: boolean;\n    disableCheckbox?: boolean;\n    icon?: IconType;\n    isLeaf?: boolean;\n    selectable?: boolean;\n    switcherIcon?: IconType;\n    /** Set style of TreeNode. This is not recommend if you don't have any force requirement */\n    className?: string;\n    style?: CSSProperties;\n}\n/** Provide a wrap type define for developer to wrap with customize fieldNames data type */\nexport declare type FieldDataNode<T, ChildFieldName extends string = 'children'> = BasicDataNode & T & Partial<Record<ChildFieldName, FieldDataNode<T, ChildFieldName>[]>>;\nexport declare type DataNode = FieldDataNode<{\n    key: string | number;\n    title?: ReactNode | ((data: DataNode) => ReactNode);\n}>;\nexport declare type EventDataNode<TreeDataType> = {\n    key: ReactKey;\n    expanded: boolean;\n    selected: boolean;\n    checked: boolean;\n    loaded: boolean;\n    loading: boolean;\n    halfChecked: boolean;\n    dragOver: boolean;\n    dragOverGapTop: boolean;\n    dragOverGapBottom: boolean;\n    pos: string;\n    active: boolean;\n} & TreeDataType & BasicDataNode;\nexport declare type IconType = ReactNode | ((props: TreeNodeProps) => ReactNode);\nexport declare type Key = string | number;\nexport declare type NodeElement = ReactElement<TreeNodeProps> & {\n    selectHandle?: HTMLSpanElement;\n    type: {\n        isTreeNode: boolean;\n    };\n};\nexport declare type NodeInstance<TreeDataType extends BasicDataNode = DataNode> = Component<TreeNodeProps<TreeDataType>> & {\n    selectHandle?: HTMLSpanElement;\n};\nexport interface Entity {\n    node: NodeElement;\n    index: number;\n    key: Key;\n    pos: string;\n    parent?: Entity;\n    children?: Entity[];\n}\nexport interface DataEntity<TreeDataType extends BasicDataNode = DataNode> extends Omit<Entity, 'node' | 'parent' | 'children'> {\n    node: TreeDataType;\n    nodes: TreeDataType[];\n    parent?: DataEntity<TreeDataType>;\n    children?: DataEntity<TreeDataType>[];\n    level: number;\n}\nexport interface FlattenNode<TreeDataType extends BasicDataNode = DataNode> {\n    parent: FlattenNode<TreeDataType> | null;\n    children: FlattenNode<TreeDataType>[];\n    pos: string;\n    data: TreeDataType;\n    title: ReactNode;\n    key: Key;\n    isStart: boolean[];\n    isEnd: boolean[];\n}\nexport declare type GetKey<RecordType> = (record: RecordType, index?: number) => Key;\nexport declare type GetCheckDisabled<RecordType> = (record: RecordType) => boolean;\nexport interface FieldNames {\n    title?: string;\n    /** @private Internal usage for `tree-select`, safe to remove if no need */\n    _title?: string[];\n    key?: string;\n    children?: string;\n}\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/interface.tsx"}],"type":"Array"}