{"value":{"content":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useState, useEffect } from 'react';\nimport pickAttrs from 'rc-util/lib/pickAttrs';\nimport Input from \"./Input\";\nimport { getTitle } from \"../utils/commonUtil\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SingleSelector = function SingleSelector(props) {\n  var inputElement = props.inputElement,\n      prefixCls = props.prefixCls,\n      id = props.id,\n      inputRef = props.inputRef,\n      disabled = props.disabled,\n      autoFocus = props.autoFocus,\n      autoComplete = props.autoComplete,\n      activeDescendantId = props.activeDescendantId,\n      mode = props.mode,\n      open = props.open,\n      values = props.values,\n      placeholder = props.placeholder,\n      tabIndex = props.tabIndex,\n      showSearch = props.showSearch,\n      searchValue = props.searchValue,\n      activeValue = props.activeValue,\n      maxLength = props.maxLength,\n      onInputKeyDown = props.onInputKeyDown,\n      onInputMouseDown = props.onInputMouseDown,\n      onInputChange = props.onInputChange,\n      onInputPaste = props.onInputPaste,\n      onInputCompositionStart = props.onInputCompositionStart,\n      onInputCompositionEnd = props.onInputCompositionEnd;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputChanged = _useState2[0],\n      setInputChanged = _useState2[1];\n\n  var combobox = mode === 'combobox';\n  var inputEditable = combobox || showSearch;\n  var item = values[0];\n  var inputValue = searchValue || '';\n\n  if (combobox && activeValue && !inputChanged) {\n    inputValue = activeValue;\n  }\n\n  useEffect(function () {\n    if (combobox) {\n      setInputChanged(false);\n    }\n  }, [combobox, activeValue]); // Not show text when closed expect combobox mode\n\n  var hasTextInput = mode !== 'combobox' && !open && !showSearch ? false : !!inputValue; // Get title\n\n  var title = getTitle(item);\n\n  var renderPlaceholder = function renderPlaceholder() {\n    if (item) {\n      return null;\n    }\n\n    var hiddenStyle = hasTextInput ? {\n      visibility: 'hidden'\n    } : undefined;\n    return /*#__PURE__*/_jsx(\"span\", {\n      className: \"\".concat(prefixCls, \"-selection-placeholder\"),\n      style: hiddenStyle,\n      children: placeholder\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      className: \"\".concat(prefixCls, \"-selection-search\"),\n      children: /*#__PURE__*/_jsx(Input, {\n        ref: inputRef,\n        prefixCls: prefixCls,\n        id: id,\n        open: open,\n        inputElement: inputElement,\n        disabled: disabled,\n        autoFocus: autoFocus,\n        autoComplete: autoComplete,\n        editable: inputEditable,\n        activeDescendantId: activeDescendantId,\n        value: inputValue,\n        onKeyDown: onInputKeyDown,\n        onMouseDown: onInputMouseDown,\n        onChange: function onChange(e) {\n          setInputChanged(true);\n          onInputChange(e);\n        },\n        onPaste: onInputPaste,\n        onCompositionStart: onInputCompositionStart,\n        onCompositionEnd: onInputCompositionEnd,\n        tabIndex: tabIndex,\n        attrs: pickAttrs(props, true),\n        maxLength: combobox ? maxLength : undefined\n      })\n    }), !combobox && item && !hasTextInput && /*#__PURE__*/_jsx(\"span\", {\n      className: \"\".concat(prefixCls, \"-selection-item\"),\n      title: title,\n      children: item.label\n    }), renderPlaceholder()]\n  });\n};\n\nexport default SingleSelector;","options":{"ext":".js","declaration":true}},"type":"Object"}