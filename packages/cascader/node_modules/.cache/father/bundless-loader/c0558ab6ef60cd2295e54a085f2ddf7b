{"value":{"content":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport { useMemo, isValidElement, cloneElement } from 'react';\nimport { toPathOptions } from \"../utils/treeUtil\";\nimport { toPathKey } from \"../utils/commonUtil\";\nexport default (function (rawValues, options, fieldNames, multiple, displayRender) {\n  return useMemo(function () {\n    var mergedDisplayRender = displayRender || // Default displayRender\n    function (labels) {\n      var mergedLabels = multiple ? labels.slice(-1) : labels;\n      var SPLIT = ' / ';\n\n      if (mergedLabels.every(function (label) {\n        return ['string', 'number'].includes(_typeof(label));\n      })) {\n        return mergedLabels.join(SPLIT);\n      } // If exist non-string value, use ReactNode instead\n\n\n      return mergedLabels.reduce(function (list, label, index) {\n        var keyedLabel = /*#__PURE__*/isValidElement(label) ? /*#__PURE__*/cloneElement(label, {\n          key: index\n        }) : label;\n\n        if (index === 0) {\n          return [keyedLabel];\n        }\n\n        return [].concat(_toConsumableArray(list), [SPLIT, keyedLabel]);\n      }, []);\n    };\n\n    return rawValues.map(function (valueCells) {\n      var _valueOptions, _valueOptions$option;\n\n      var valueOptions = toPathOptions(valueCells, options, fieldNames);\n      var label = mergedDisplayRender(valueOptions.map(function (_ref) {\n        var _option$fieldNames$la;\n\n        var option = _ref.option,\n            value = _ref.value;\n        return (_option$fieldNames$la = option === null || option === void 0 ? void 0 : option[fieldNames.label]) !== null && _option$fieldNames$la !== void 0 ? _option$fieldNames$la : value;\n      }), valueOptions.map(function (_ref2) {\n        var option = _ref2.option;\n        return option;\n      }));\n      var value = toPathKey(valueCells);\n      return {\n        label: label,\n        value: value,\n        key: value,\n        valueCells: valueCells,\n        disabled: (_valueOptions = valueOptions[valueOptions.length - 1]) === null || _valueOptions === void 0 ? void 0 : (_valueOptions$option = _valueOptions.option) === null || _valueOptions$option === void 0 ? void 0 : _valueOptions$option.disabled\n      };\n    });\n  }, [rawValues, options, fieldNames, displayRender, multiple]);\n});","options":{"ext":".js","declaration":true}},"type":"Object"}