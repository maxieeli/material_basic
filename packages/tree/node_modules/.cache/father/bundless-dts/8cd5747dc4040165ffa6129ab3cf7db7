{"value":[{"file":"Tree.d.ts","content":"import * as React from 'react';\nimport { NodeMouseEventHandler, NodeDragEventHandler, NodeDragEventParams, NodeMouseEventParams } from './contextType';\nimport { DataNode, IconType, Key, FlattenNode, DataEntity, EventDataNode, NodeInstance, ScrollTo, FieldNames, BasicDataNode } from './interface';\nimport { NodeListRef } from './NodeList';\nimport DropIndicator from './DropIndicator';\ninterface CheckInfo<TreeDataType extends BasicDataNode = DataNode> {\n    event: 'check';\n    node: EventDataNode<TreeDataType>;\n    checked: boolean;\n    nativeEvent: MouseEvent;\n    checkedNodes: TreeDataType[];\n    checkedNodesPositions?: {\n        node: TreeDataType;\n        pos: string;\n    }[];\n    halfCheckedKeys?: Key[];\n}\nexport interface AllowDropOptions<TreeDataType extends BasicDataNode = DataNode> {\n    dragNode: TreeDataType;\n    dropNode: TreeDataType;\n    dropPosition: -1 | 0 | 1;\n}\nexport declare type AllowDrop<TreeDataType extends BasicDataNode = DataNode> = (options: AllowDropOptions<TreeDataType>) => boolean;\nexport declare type DraggableFn = (node: DataNode) => boolean;\nexport declare type DraggableConfig = {\n    icon?: React.ReactNode | false;\n    nodeDraggable?: DraggableFn;\n};\nexport declare type ExpandAction = false | 'click' | 'doubleClick';\nexport interface TreeProps<TreeDataType extends BasicDataNode = DataNode> {\n    prefixCls: string;\n    className?: string;\n    style?: React.CSSProperties;\n    focusable?: boolean;\n    activeKey?: Key;\n    tabIndex?: number;\n    children?: React.ReactNode;\n    treeData?: TreeDataType[];\n    fieldNames?: FieldNames;\n    showLine?: boolean;\n    showIcon?: boolean;\n    icon?: IconType;\n    selectable?: boolean;\n    expandAction?: ExpandAction;\n    disabled?: boolean;\n    multiple?: boolean;\n    checkable?: boolean | React.ReactNode;\n    checkStrictly?: boolean;\n    draggable?: DraggableFn | boolean | DraggableConfig;\n    defaultExpandParent?: boolean;\n    autoExpandParent?: boolean;\n    defaultExpandAll?: boolean;\n    defaultExpandedKeys?: Key[];\n    expandedKeys?: Key[];\n    defaultCheckedKeys?: Key[];\n    checkedKeys?: Key[] | {\n        checked: Key[];\n        halfChecked: Key[];\n    };\n    defaultSelectedKeys?: Key[];\n    selectedKeys?: Key[];\n    allowDrop?: AllowDrop<TreeDataType>;\n    titleRender?: (node: TreeDataType) => React.ReactNode;\n    dropIndicatorRender?: (props: {\n        dropPosition: -1 | 0 | 1;\n        dropLevelOffset: number;\n        indent: number;\n        prefixCls: string;\n    }) => React.ReactNode;\n    onFocus?: React.FocusEventHandler<HTMLDivElement>;\n    onBlur?: React.FocusEventHandler<HTMLDivElement>;\n    onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;\n    onContextMenu?: React.MouseEventHandler<HTMLDivElement>;\n    onClick?: NodeMouseEventHandler;\n    onDoubleClick?: NodeMouseEventHandler;\n    onScroll?: React.UIEventHandler<HTMLElement>;\n    onExpand?: (expandedKeys: Key[], info: {\n        node: EventDataNode<TreeDataType>;\n        expanded: boolean;\n        nativeEvent: MouseEvent;\n    }) => void;\n    onCheck?: (checked: {\n        checked: Key[];\n        halfChecked: Key[];\n    } | Key[], info: CheckInfo<TreeDataType>) => void;\n    onSelect?: (selectedKeys: Key[], info: {\n        event: 'select';\n        selected: boolean;\n        node: EventDataNode<TreeDataType>;\n        selectedNodes: TreeDataType[];\n        nativeEvent: MouseEvent;\n    }) => void;\n    onLoad?: (loadedKeys: Key[], info: {\n        event: 'load';\n        node: EventDataNode<TreeDataType>;\n    }) => void;\n    loadData?: (treeNode: EventDataNode<TreeDataType>) => Promise<any>;\n    loadedKeys?: Key[];\n    onMouseEnter?: (info: NodeMouseEventParams<TreeDataType>) => void;\n    onMouseLeave?: (info: NodeMouseEventParams<TreeDataType>) => void;\n    onRightClick?: (info: {\n        event: React.MouseEvent;\n        node: EventDataNode<TreeDataType>;\n    }) => void;\n    onDragStart?: (info: NodeDragEventParams<TreeDataType>) => void;\n    onDragEnter?: (info: NodeDragEventParams<TreeDataType> & {\n        expandedKeys: Key[];\n    }) => void;\n    onDragOver?: (info: NodeDragEventParams<TreeDataType>) => void;\n    onDragLeave?: (info: NodeDragEventParams<TreeDataType>) => void;\n    onDragEnd?: (info: NodeDragEventParams<TreeDataType>) => void;\n    onDrop?: (info: NodeDragEventParams<TreeDataType> & {\n        dragNode: EventDataNode<TreeDataType>;\n        dragNodesKeys: Key[];\n        dropPosition: number;\n        dropToGap: boolean;\n    }) => void;\n    /**\n     * Used for `tree-select` only.\n     * Do not use in your production code directly since this will be refactor.\n     */\n    onActiveChange?: (key: Key) => void;\n    filterTreeNode?: (treeNode: EventDataNode<TreeDataType>) => boolean;\n    motion?: any;\n    switcherIcon?: IconType;\n    height?: number;\n    itemHeight?: number;\n    virtual?: boolean;\n    rootClassName?: string;\n    rootStyle?: React.CSSProperties;\n}\ninterface TreeState<TreeDataType extends BasicDataNode = DataNode> {\n    keyEntities: Record<Key, DataEntity<TreeDataType>>;\n    indent: number | null;\n    selectedKeys: Key[];\n    checkedKeys: Key[];\n    halfCheckedKeys: Key[];\n    loadedKeys: Key[];\n    loadingKeys: Key[];\n    expandedKeys: Key[];\n    draggingNodeKey: React.Key;\n    dragChildrenKeys: Key[];\n    dropPosition: -1 | 0 | 1 | null;\n    dropLevelOffset: number | null;\n    dropContainerKey: Key | null;\n    dropTargetKey: Key | null;\n    dropTargetPos: string | null;\n    dropAllowed: boolean;\n    dragOverNodeKey: Key | null;\n    treeData: TreeDataType[];\n    flattenNodes: FlattenNode<TreeDataType>[];\n    focused: boolean;\n    activeKey: Key;\n    listChanging: boolean;\n    prevProps: TreeProps;\n    fieldNames: FieldNames;\n}\ndeclare class Tree<TreeDataType extends DataNode | BasicDataNode = DataNode> extends React.Component<TreeProps<TreeDataType>, TreeState<TreeDataType>> {\n    static defaultProps: {\n        prefixCls: string;\n        showLine: boolean;\n        showIcon: boolean;\n        selectable: boolean;\n        multiple: boolean;\n        checkable: boolean;\n        disabled: boolean;\n        checkStrictly: boolean;\n        draggable: boolean;\n        defaultExpandParent: boolean;\n        autoExpandParent: boolean;\n        defaultExpandAll: boolean;\n        defaultExpandedKeys: any[];\n        defaultCheckedKeys: any[];\n        defaultSelectedKeys: any[];\n        dropIndicatorRender: typeof DropIndicator;\n        allowDrop: () => boolean;\n        expandAction: boolean;\n    };\n    static TreeNode: React.FC<import(\"./TreeNode\").TreeNodeProps<DataNode>>;\n    destroyed: boolean;\n    delayedDragEnterLogic: Record<Key, number>;\n    loadingRetryTimes: Record<Key, number>;\n    state: TreeState<TreeDataType>;\n    dragStartMousePosition: any;\n    dragNode: NodeInstance<TreeDataType>;\n    currentMouseOverDroppableNodeKey: any;\n    listRef: React.RefObject<NodeListRef>;\n    componentDidMount(): void;\n    componentDidUpdate(): void;\n    onUpdated(): void;\n    componentWillUnmount(): void;\n    static getDerivedStateFromProps(props: TreeProps, prevState: TreeState): Partial<TreeState<DataNode>>;\n    onNodeDragStart: NodeDragEventHandler<TreeDataType, HTMLDivElement>;\n    /**\n     * [Legacy] Select handler is smaller than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n    onNodeDragEnter: (event: React.DragEvent<HTMLDivElement>, node: NodeInstance<TreeDataType>) => void;\n    onNodeDragOver: (event: React.DragEvent<HTMLDivElement>, node: NodeInstance<TreeDataType>) => void;\n    onNodeDragLeave: NodeDragEventHandler<TreeDataType>;\n    onWindowDragEnd: (event: any) => void;\n    onNodeDragEnd: NodeDragEventHandler<TreeDataType>;\n    onNodeDrop: (event: React.DragEvent<HTMLDivElement>, node: any, outsideTree?: boolean) => void;\n    resetDragState(): void;\n    cleanDragState: () => void;\n    triggerExpandActionExpand: NodeMouseEventHandler;\n    onNodeClick: NodeMouseEventHandler;\n    onNodeDoubleClick: NodeMouseEventHandler;\n    onNodeSelect: NodeMouseEventHandler<TreeDataType>;\n    onNodeCheck: (e: React.MouseEvent<HTMLSpanElement>, treeNode: EventDataNode<TreeDataType>, checked: boolean) => void;\n    onNodeLoad: (treeNode: EventDataNode<TreeDataType>) => Promise<void>;\n    onNodeMouseEnter: NodeMouseEventHandler<TreeDataType>;\n    onNodeMouseLeave: NodeMouseEventHandler<TreeDataType>;\n    onNodeContextMenu: NodeMouseEventHandler<TreeDataType>;\n    onFocus: React.FocusEventHandler<HTMLDivElement>;\n    onBlur: React.FocusEventHandler<HTMLDivElement>;\n    getTreeNodeRequiredProps: () => {\n        expandedKeys: Key[];\n        selectedKeys: Key[];\n        loadedKeys: Key[];\n        loadingKeys: Key[];\n        checkedKeys: Key[];\n        halfCheckedKeys: Key[];\n        dragOverNodeKey: Key;\n        dropPosition: 0 | 1 | -1;\n        keyEntities: Record<Key, DataEntity<TreeDataType>>;\n    };\n    /** Set uncontrolled `expandedKeys`. This will also auto update `flattenNodes`. */\n    setExpandedKeys: (expandedKeys: Key[]) => void;\n    onNodeExpand: (e: React.MouseEvent<HTMLDivElement>, treeNode: EventDataNode<TreeDataType>) => void;\n    onListChangeStart: () => void;\n    onListChangeEnd: () => void;\n    onActiveChange: (newActiveKey: Key) => void;\n    getActiveItem: () => FlattenNode<TreeDataType>;\n    offsetActiveKey: (offset: number) => void;\n    onKeyDown: React.KeyboardEventHandler<HTMLDivElement>;\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: (state: Partial<TreeState<TreeDataType>>, atomic?: boolean, forceState?: Partial<TreeState<TreeDataType>> | null) => void;\n    scrollTo: ScrollTo;\n    render(): JSX.Element;\n}\nexport default Tree;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/Tree.tsx"}],"type":"Array"}