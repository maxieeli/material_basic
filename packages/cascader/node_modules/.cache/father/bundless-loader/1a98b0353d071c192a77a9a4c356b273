{"value":{"content":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useMemo, useContext } from 'react';\nimport classNames from 'classnames';\nimport { isLeaf, toPathKey } from \"../utils/commonUtil\";\nimport CascaderContext from \"../context\";\nimport Checkbox from \"./Checkbox\";\nimport { SEARCH_MARK } from \"../hooks/useSearchOptions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var FIX_LABEL = '__cascader_fix_label__';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n\n  var _useContext = useContext(CascaderContext),\n      fieldNames = _useContext.fieldNames,\n      changeOnSelect = _useContext.changeOnSelect,\n      expandTrigger = _useContext.expandTrigger,\n      expandIcon = _useContext.expandIcon,\n      loadingIcon = _useContext.loadingIcon,\n      dropdownMenuColumnStyle = _useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === 'hover'; // ============================ Option ============================\n\n  var optionInfoList = useMemo(function () {\n    return options.map(function (option) {\n      var _option$FIX_LABEL;\n\n      var disabled = option.disabled;\n      var searchOptions = option[SEARCH_MARK];\n      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return /*#__PURE__*/_jsx(\"ul\", {\n    className: menuPrefixCls,\n    role: \"menu\",\n    children: optionInfoList.map(function (_ref2) {\n      var _classNames;\n\n      var disabled = _ref2.disabled,\n          label = _ref2.label,\n          value = _ref2.value,\n          isMergedLeaf = _ref2.isLeaf,\n          isLoading = _ref2.isLoading,\n          checked = _ref2.checked,\n          halfChecked = _ref2.halfChecked,\n          option = _ref2.option,\n          fullPath = _ref2.fullPath,\n          fullPathKey = _ref2.fullPathKey;\n\n      // >>>>> Open\n      var triggerOpenPath = function triggerOpenPath() {\n        if (!disabled && (!hoverOpen || !isMergedLeaf)) {\n          onActive(fullPath);\n        }\n      }; // >>>>> Selection\n\n\n      var triggerSelect = function triggerSelect() {\n        if (isSelectable(option)) {\n          onSelect(fullPath, isMergedLeaf);\n        }\n      }; // >>>>> Title\n\n\n      var title;\n\n      if (typeof option.title === 'string') {\n        title = option.title;\n      } else if (typeof label === 'string') {\n        title = label;\n      } // >>>>> Render\n\n\n      return /*#__PURE__*/_jsxs(\"li\", {\n        className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n        style: dropdownMenuColumnStyle,\n        role: \"menuitemcheckbox\",\n        title: title,\n        \"aria-checked\": checked,\n        \"data-path-key\": fullPathKey,\n        onClick: function onClick() {\n          triggerOpenPath();\n\n          if (!multiple || isMergedLeaf) {\n            triggerSelect();\n          }\n        },\n        onDoubleClick: function onDoubleClick() {\n          if (changeOnSelect) {\n            onToggleOpen(false);\n          }\n        },\n        onMouseEnter: function onMouseEnter() {\n          if (hoverOpen) {\n            triggerOpenPath();\n          }\n        },\n        onMouseDown: function onMouseDown(e) {\n          // Prevent selector from blurring\n          e.preventDefault();\n        },\n        children: [multiple && /*#__PURE__*/_jsx(Checkbox, {\n          prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n          checked: checked,\n          halfChecked: halfChecked,\n          disabled: disabled,\n          onClick: function onClick(e) {\n            e.stopPropagation();\n            triggerSelect();\n          }\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"\".concat(menuItemPrefixCls, \"-content\"),\n          children: label\n        }), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/_jsx(\"div\", {\n          className: \"\".concat(menuItemPrefixCls, \"-expand-icon\"),\n          children: expandIcon\n        }), isLoading && loadingIcon && /*#__PURE__*/_jsx(\"div\", {\n          className: \"\".concat(menuItemPrefixCls, \"-loading-icon\"),\n          children: loadingIcon\n        })]\n      }, fullPathKey);\n    })\n  });\n}","options":{"ext":".js","declaration":true}},"type":"Object"}