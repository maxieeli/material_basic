{"value":[{"file":"Select.d.ts","content":"import type { ReactNode, Key, Ref, PropsWithChildren, ReactElement } from 'react';\nimport type { BaseSelectPropsWithoutPrivate, BaseSelectRef, DisplayValueType, RenderNode } from './BaseSelect';\nimport OptGroup from './OptGroup';\nimport Option from './Option';\nexport declare type OnActiveValue = (active: RawValueType, index: number, info?: {\n    source?: 'keyboard' | 'mouse';\n}) => void;\nexport declare type OnInternalSelect = (value: RawValueType, info: {\n    selected: boolean;\n}) => void;\nexport declare type RawValueType = string | number;\nexport interface LabelInValueType {\n    label: ReactNode;\n    value: RawValueType;\n    /** @deprecated `key` is useless since it should always same as `value` */\n    key?: Key;\n}\nexport declare type DraftValueType = RawValueType | LabelInValueType | DisplayValueType | (RawValueType | LabelInValueType | DisplayValueType)[];\nexport declare type FilterFunc<OptionType> = (inputValue: string, option?: OptionType) => boolean;\nexport interface FieldNames {\n    value?: string;\n    label?: string;\n    options?: string;\n}\nexport interface BaseOptionType {\n    disabled?: boolean;\n    [name: string]: any;\n}\nexport interface DefaultOptionType extends BaseOptionType {\n    label: ReactNode;\n    value?: string | number | null;\n    children?: Omit<DefaultOptionType, 'children'>[];\n}\nexport declare type SelectHandler<ValueType = any, OptionType extends BaseOptionType = DefaultOptionType> = ((value: RawValueType | LabelInValueType, option: OptionType) => void) | ((value: ValueType, option: OptionType) => void);\ndeclare type ArrayElementType<T> = T extends (infer E)[] ? E : T;\nexport interface SelectProps<ValueType = any, OptionType extends BaseOptionType = DefaultOptionType> extends BaseSelectPropsWithoutPrivate {\n    prefixCls?: string;\n    id?: string;\n    backfill?: boolean;\n    fieldNames?: FieldNames;\n    /** @deprecated Use `searchValue` instead */\n    inputValue?: string;\n    searchValue?: string;\n    onSearch?: (value: string) => void;\n    autoClearSearchValue?: boolean;\n    onSelect?: SelectHandler<ArrayElementType<ValueType>, OptionType>;\n    onDeselect?: SelectHandler<ArrayElementType<ValueType>, OptionType>;\n    /**\n    * In Select, `false` means do nothing.\n    * In TreeSelect, `false` will highlight match item.\n    * It's by design.\n    */\n    filterOption?: boolean | FilterFunc<OptionType>;\n    filterSort?: (optionA: OptionType, optionB: OptionType) => number;\n    optionFilterProp?: string;\n    optionLabelProp?: string;\n    children?: ReactNode;\n    options?: OptionType[];\n    defaultActiveFirstOption?: boolean;\n    virtual?: boolean;\n    listHeight?: number;\n    listItemHeight?: number;\n    menuItemSelectedIcon?: RenderNode;\n    mode?: 'combobox' | 'multiple' | 'tags';\n    labelInValue?: boolean;\n    value?: ValueType | null;\n    defaultValue?: ValueType | null;\n    onChange?: (value: ValueType, option: OptionType | OptionType[]) => void;\n}\ndeclare const TypedSelect: (<ValueType = any, OptionType extends DefaultOptionType | BaseOptionType = DefaultOptionType>(props: SelectProps<ValueType, OptionType> & {\n    children?: ReactNode;\n} & {\n    ref?: Ref<BaseSelectRef>;\n}) => ReactElement) & {\n    Option: typeof Option;\n    OptGroup: typeof OptGroup;\n};\nexport default TypedSelect;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/select/src/Select.tsx"}],"type":"Array"}