{"value":[{"file":"treeUtil.d.ts","content":"import type { ReactNode } from 'react';\nimport { DataNode, FlattenNode, DataEntity, Key, EventDataNode, GetKey, FieldNames, BasicDataNode } from '../interface';\nimport { TreeNodeProps } from '../TreeNode';\nexport declare function getKey(key: Key, pos: string): Key;\nexport declare function fillFieldNames(fieldNames?: FieldNames): Required<FieldNames>;\n/**\n * Warning if TreeNode do not provides key\n */\nexport declare function warningWithoutKey(treeData: DataNode[], fieldNames: FieldNames): void;\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport declare function convertTreeToData(rootNodes: ReactNode): DataNode[];\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `tree-select`).\n */\nexport declare function flattenTreeData<TreeDataType extends BasicDataNode = DataNode>(treeNodeList: TreeDataType[], expandedKeys: Key[] | true, fieldNames: FieldNames): FlattenNode<TreeDataType>[];\ndeclare type ExternalGetKey = GetKey<DataNode> | string;\ninterface TraverseDataNodesConfig {\n    childrenPropName?: string;\n    externalGetKey?: ExternalGetKey;\n    fieldNames?: FieldNames;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the tree since we may refactor this code.\n */\nexport declare function traverseDataNodes(dataNodes: DataNode[], callback: (data: {\n    node: DataNode;\n    index: number;\n    pos: string;\n    key: Key;\n    parentPos: string | number;\n    level: number;\n    nodes: DataNode[];\n}) => void, config?: TraverseDataNodesConfig | string): void;\ninterface Wrapper {\n    posEntities: Record<string, DataEntity>;\n    keyEntities: Record<Key, DataEntity>;\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport declare function convertDataToEntities(dataNodes: DataNode[], { initWrapper, processEntity, onProcessFinished, externalGetKey, childrenPropName, fieldNames, }?: {\n    initWrapper?: (wrapper: Wrapper) => Wrapper;\n    processEntity?: (entity: DataEntity, wrapper: Wrapper) => void;\n    onProcessFinished?: (wrapper: Wrapper) => void;\n    externalGetKey?: ExternalGetKey;\n    childrenPropName?: string;\n    fieldNames?: FieldNames;\n}, \n/** @deprecated Use `config.externalGetKey` instead */\nlegacyExternalGetKey?: ExternalGetKey): {\n    posEntities: {};\n    keyEntities: {};\n};\nexport interface TreeNodeRequiredProps<TreeDataType extends BasicDataNode = DataNode> {\n    expandedKeys: Key[];\n    selectedKeys: Key[];\n    loadedKeys: Key[];\n    loadingKeys: Key[];\n    checkedKeys: Key[];\n    halfCheckedKeys: Key[];\n    dragOverNodeKey: Key;\n    dropPosition: number;\n    keyEntities: Record<Key, DataEntity<TreeDataType>>;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport declare function getTreeNodeProps<TreeDataType extends BasicDataNode = DataNode>(key: Key, { expandedKeys, selectedKeys, loadedKeys, loadingKeys, checkedKeys, halfCheckedKeys, dragOverNodeKey, dropPosition, keyEntities, }: TreeNodeRequiredProps<TreeDataType>): {\n    eventKey: Key;\n    expanded: boolean;\n    selected: boolean;\n    loaded: boolean;\n    loading: boolean;\n    checked: boolean;\n    halfChecked: boolean;\n    pos: string;\n    dragOver: boolean;\n    dragOverGapTop: boolean;\n    dragOverGapBottom: boolean;\n};\nexport declare function convertNodePropsToEventData<TreeDataType extends BasicDataNode = DataNode>(props: TreeNodeProps<TreeDataType>): EventDataNode<TreeDataType>;\nexport {};\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/tree/src/utils/treeUtil.ts"}],"type":"Array"}