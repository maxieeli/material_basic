{"value":[{"file":"Cascader.d.ts","content":"import type { ReactNode, ReactElement, CSSProperties, Ref, PropsWithChildren } from 'react';\nimport type { BaseSelectPropsWithoutPrivate, BaseSelectRef } from '@owen-basic/select';\nimport type { Placement } from '@owen-basic/select/es/BaseSelect';\nimport { SHOW_CHILD, SHOW_PARENT } from './utils/commonUtil';\nexport interface ShowSearchType<OptionType extends BaseOptionType = DefaultOptionType> {\n    filter?: (inputValue: string, options: OptionType[], fieldNames: FieldNames) => boolean;\n    render?: (inputValue: string, path: OptionType[], prefixCls: string, fieldNames: FieldNames) => ReactNode;\n    sort?: (a: OptionType[], b: OptionType[], inputValue: string, fieldNames: FieldNames) => number;\n    matchInputWidth?: boolean;\n    limit?: number | false;\n}\nexport interface FieldNames {\n    label?: string;\n    value?: string;\n    children?: string;\n}\nexport interface InternalFieldNames extends Required<FieldNames> {\n    key: string;\n}\nexport declare type SingleValueType = (string | number)[];\nexport declare type ValueType = SingleValueType | SingleValueType[];\nexport declare type ShowCheckedStrategy = typeof SHOW_PARENT | typeof SHOW_CHILD;\nexport interface BaseOptionType {\n    disabled?: boolean;\n    [name: string]: any;\n}\nexport interface DefaultOptionType extends BaseOptionType {\n    label: ReactNode;\n    value?: string | number | null;\n    children?: DefaultOptionType[];\n}\ninterface BaseCascaderProps<OptionType extends BaseOptionType = DefaultOptionType> extends Omit<BaseSelectPropsWithoutPrivate, 'tokenSeparators' | 'labelInValue' | 'mode' | 'showSearch'> {\n    id?: string;\n    prefixCls?: string;\n    fieldNames?: FieldNames;\n    children?: ReactElement;\n    value?: ValueType;\n    defaultValue?: ValueType;\n    changeOnSelect?: boolean;\n    displayRender?: (label: string[], selectedOptions?: OptionType[]) => ReactNode;\n    checkable?: boolean | ReactNode;\n    showCheckedStrategy?: ShowCheckedStrategy;\n    showSearch?: boolean | ShowSearchType<OptionType>;\n    searchValue?: string;\n    onSearch?: (value: string) => void;\n    expandTrigger?: 'hover' | 'click';\n    options?: OptionType[];\n    /** @private Internal usage. Do not use in your production. */\n    dropdownPrefixCls?: string;\n    loadData?: (selectOptions: OptionType[]) => void;\n    /** @deprecated Use `open` instead */\n    popupVisible?: boolean;\n    /** @deprecated Use `dropdownClassName` instead */\n    popupClassName?: string;\n    dropdownClassName?: string;\n    dropdownMenuColumnStyle?: CSSProperties;\n    /** @deprecated Use `placement` instead */\n    popupPlacement?: Placement;\n    placement?: Placement;\n    /** @deprecated Use `onDropdownVisibleChange` instead */\n    onPopupVisibleChange?: (open: boolean) => void;\n    onDropdownVisibleChange?: (open: boolean) => void;\n    expandIcon?: ReactNode;\n    loadingIcon?: ReactNode;\n}\ndeclare type OnSingleChange<OptionType> = (value: SingleValueType, selectOptions: OptionType[]) => void;\ndeclare type OnMultipleChange<OptionType> = (value: SingleValueType[], selectOptions: OptionType[][]) => void;\nexport interface SingleCascaderProps<OptionType extends BaseOptionType = DefaultOptionType> extends BaseCascaderProps<OptionType> {\n    checkable?: false;\n    onChange?: OnSingleChange<OptionType>;\n}\nexport interface MultipleCascaderProps<OptionType extends BaseOptionType = DefaultOptionType> extends BaseCascaderProps<OptionType> {\n    checkable: true | ReactNode;\n    onChange?: OnMultipleChange<OptionType>;\n}\nexport declare type CascaderProps<OptionType extends BaseOptionType = DefaultOptionType> = SingleCascaderProps<OptionType> | MultipleCascaderProps<OptionType>;\nexport declare type InternalCascaderProps<OptionType extends BaseOptionType = DefaultOptionType> = Omit<SingleCascaderProps<OptionType> | MultipleCascaderProps<OptionType>, 'onChange'> & {\n    onChange?: (value: SingleValueType | SingleValueType[], selectOptions: OptionType[] | OptionType[][]) => void;\n};\nexport declare type CascaderRef = Omit<BaseSelectRef, 'scrollTo'>;\ndeclare const Cascader: (<OptionType extends DefaultOptionType | BaseOptionType = DefaultOptionType>(props: PropsWithChildren<CascaderProps<OptionType>> & {\n    ref?: Ref<BaseSelectRef>;\n}) => ReactElement) & {\n    displayName?: string;\n    SHOW_PARENT: typeof SHOW_PARENT;\n    SHOW_CHILD: typeof SHOW_CHILD;\n};\nexport default Cascader;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/cascader/src/Cascader.tsx"}],"type":"Array"}