{"value":[{"file":"BaseSelect.d.ts","content":"import * as React from 'react';\nimport type { AlignType } from 'rc-trigger/lib/interface';\nimport type { ScrollTo, ScrollConfig } from 'rc-virtual-list/lib/List';\nexport declare type RenderNode = React.ReactNode | ((props: any) => React.ReactNode);\nexport declare type RenderDOMFunc = (props: any) => HTMLElement;\nexport declare type Mode = 'multiple' | 'tags' | 'combobox';\nexport declare type Placement = 'bottomLeft' | 'bottomRight' | 'topLeft' | 'topRight';\nexport declare type RawValueType = string | number;\nexport declare type DisplayInfoType = 'add' | 'remove' | 'clear';\nexport interface RefOptionListProps {\n    onKeyDown: React.KeyboardEventHandler;\n    onKeyUp: React.KeyboardEventHandler;\n    scrollTo?: (args: number | ScrollConfig) => void;\n}\nexport declare type CustomTagProps = {\n    label: React.ReactNode;\n    value: any;\n    disabled: boolean;\n    onClose: (event?: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    closable: boolean;\n};\nexport interface DisplayValueType {\n    key?: React.Key;\n    value?: RawValueType;\n    label?: React.ReactNode;\n    title?: string | number;\n    disabled?: boolean;\n}\nexport interface BaseSelectRef {\n    focus: () => void;\n    blur: () => void;\n    scrollTo: ScrollTo;\n}\nexport interface BaseSelectPrivateProps {\n    id: string;\n    prefixCls: string;\n    omitDomProps?: string[];\n    displayValues: DisplayValueType[];\n    onDisplayValuesChange: (values: DisplayValueType[], info: {\n        type: DisplayInfoType;\n        values: DisplayValueType[];\n    }) => void;\n    /** Current dropdown list active item string value */\n    activeValue?: string;\n    /** Link search input with target element */\n    activeDescendantId?: string;\n    onActiveValueChange?: (value: string | null) => void;\n    searchValue: string;\n    /** Trigger onSearch, return false to prevent trigger open event */\n    onSearch: (searchValue: string, info: {\n        source: 'typing' | 'effect' | 'submit' | 'blur';\n    }) => void;\n    /** Trigger when search text match the `tokenSeparators`. Will provide split content */\n    onSearchSplit?: (words: string[]) => void;\n    OptionList: React.ForwardRefExoticComponent<React.PropsWithoutRef<any> & React.RefAttributes<RefOptionListProps>>;\n    /** Tell if provided `options` is empty */\n    emptyOptions: boolean;\n}\nexport declare type BaseSelectPropsWithoutPrivate = Omit<BaseSelectProps, keyof BaseSelectPrivateProps>;\nexport interface BaseSelectProps extends BaseSelectPrivateProps, React.AriaAttributes {\n    className?: string;\n    style?: React.CSSProperties;\n    showSearch?: boolean;\n    tagRender?: (props: CustomTagProps) => React.ReactElement;\n    maxLength?: number;\n    label?: string | React.ReactNode;\n    tabIndex?: number;\n    autoFocus?: boolean;\n    notFoundContent?: React.ReactNode;\n    placeholder?: React.ReactNode;\n    onClear?: () => void;\n    choiceTransitionName?: string;\n    mode?: Mode;\n    disabled?: boolean;\n    loading?: boolean;\n    open?: boolean;\n    defaultOpen?: boolean;\n    onDropdownVisibleChange?: (open: boolean) => void;\n    /** @private Internal usage. Do not use in your production. */\n    getInputElement?: () => JSX.Element;\n    /** @private Internal usage. Do not use in your production. */\n    getRawInputElement?: () => JSX.Element;\n    maxTagTextLength?: number;\n    maxTagCount?: number | 'responsive';\n    maxTagPlaceholder?: React.ReactNode | ((omittedValues: DisplayValueType[]) => React.ReactNode);\n    tokenSeparators?: string[];\n    allowClear?: boolean;\n    showArrow?: boolean;\n    inputIcon?: RenderNode;\n    /** Clear all icon */\n    clearIcon?: RenderNode;\n    /** Selector remove icon */\n    removeIcon?: RenderNode;\n    animation?: string;\n    transitionName?: string;\n    dropdownStyle?: React.CSSProperties;\n    dropdownClassName?: string;\n    dropdownMatchSelectWidth?: boolean | number;\n    dropdownRender?: (menu: React.ReactElement) => React.ReactElement;\n    dropdownAlign?: AlignType;\n    placement?: Placement;\n    getPopupContainer?: RenderDOMFunc;\n    showAction?: ('focus' | 'click')[];\n    onBlur?: React.FocusEventHandler<HTMLElement>;\n    onFocus?: React.FocusEventHandler<HTMLElement>;\n    onKeyUp?: React.KeyboardEventHandler<HTMLDivElement>;\n    onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;\n    onMouseDown?: React.MouseEventHandler<HTMLDivElement>;\n    onPopupScroll?: React.UIEventHandler<HTMLDivElement>;\n    onInputKeyDown?: React.KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\n    onClick?: React.MouseEventHandler<HTMLDivElement>;\n}\nexport declare function isMultiple(mode: Mode): boolean;\ndeclare const BaseSelect: React.ForwardRefExoticComponent<BaseSelectProps & React.RefAttributes<BaseSelectRef>>;\nexport default BaseSelect;\n","sourceFile":"/Users/liqipeng/Desktop/material_basic/packages/select/src/BaseSelect.tsx"}],"type":"Array"}